#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

# for jq
PATH=/usr/local/bin:$PATH

payload=$TMPDIR/git-resource-request

cat > $payload <&0

echo 'Running check script...'

load_pubkey $payload

echo 'Parsing payload...'
uri=$(jq -r '.source.uri // ""' < $payload)
branch_regexp=$(jq -r '.source.branch_regexp // ".*"' < $payload)
max_branches=$(jq -r '.source.max_branches // "20"' < $payload)
previous_branches_list=$(jq -r '.version.branches // ""' < $payload)
previous_increment=$(jq -r '.version.increment // "0"' < $payload)

destination=$TMPDIR/git-resource-repo-cache

if echo $uri | grep -E '^/' ; then
  local_uri=true
else
  local_uri=false
fi

if $local_uri ; then
  # must omit --depth flag test suite otherwise local clone fails with RC=1
  depthflag=''
else
  # pass depth flag in actual use to avoid performance hit of cloning entire repo depth
  depthflag='--depth 1'
fi


if [ ! -d $destination ]; then
  echo 'Cloning repo...'
  # if doesn't exist, i.e. is cached, clone it (default branch is fine, we
  # just need to fetch and list all the remote branches)...
  git clone $depthflag $uri $destination
fi

cd $destination

echo 'Fetching remote branches...'
# fetch all remote branches
git fetch --prune origin '+refs/heads/*:refs/remotes/origin/*'

echo 'Filtering branches...'
current_branches_list=$(
  git show-ref |
  grep 'refs/remotes/origin' |
  grep -v 'HEAD' |
  cut -d ' ' -f 2 |
  cut -d '/' -f 4,5,6 |
  grep -E "$branch_regexp" |
  tr '\n' ' ' |
  sed 's/ $//'g
)

echo 'Running check script...'
current_branches_count=$(echo $current_branches_list | wc -w)
if [ $current_branches_count -gt $max_branches ]; then
  echo "$current_branches_count branches found, but 'max_branches' was $max_branches. " \
    "Increase 'max_branches', or provide a more specific regular expression in 'branch_regexp'."
  exit 99
fi

echo 'Generating latest version json...'
increment="$(($previous_increment + 1))"
latest_version=$(jq -c -n "[{\"increment\": \"$increment\",\"branches\": \"$current_branches_list\"}]")

if [ "$previous_branches_list" == "$current_branches_list" ] ; then
  echo 'Previous branches json is same as current branches json, returning empty (no) version...'
  version="[]"
elif [ "$previous_branches_list" == '' ]; then
  echo 'Previous branches json is empty, returning latest version as version...'
  version=$latest_version
else
  echo 'Previous branches json is different than current branches json, returning latest version...'
  version=$latest_version
fi

echo 'Finished check script...'
echo $version >&3
